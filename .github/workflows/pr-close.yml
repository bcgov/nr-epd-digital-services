# name: Pull Request Closed

# on:
#   pull_request:
#     types:
#       - closed
#     paths-ignore:
#       - ".github/ISSUE_TEMPLATE/*"
#       - "**.md"

# env:
#   REGISTRY: ghcr.io
#   NAME: gfp

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: true

# jobs:
#   # Clean up OpenShift when PR closed, no conditions
#   cleanup-openshift:
#     name: Cleanup OpenShift
#     runs-on: ubuntu-22.04
#     steps:
#       - uses: actions/checkout@v3
#       - name: Remove OpenShift artifacts
#         run: |
#           oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
#           oc project ${{ secrets.OC_NAMESPACE }}

#           # Remove old build runs, build pods and deployment pods
#           oc delete all,pvc,secret -l app=${{ env.NAME }}-${{ github.event.number }}

#   # If merged, then handle any image promotion
#   image-backend:
#     name: Backend Image Promotion
#     outputs:
#       build: ${{ steps.check.outputs.build }}
#     env:
#       COMPONENT: backend
#       PREV: ${{ github.event.number }}
#       ZONE: test
#     environment:
#       name: test
#     runs-on: ubuntu-22.04
#     if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
#     steps:
#       - name: Check for image changes
#         id: check
#         run: |
#           # Vars
#           IMG_PREV="${{ env.REGISTRY }}/${{ github.repository }}:${{ env.PREV }}-${{ env.COMPONENT }}"
#           IMG_ZONE="${{ env.REGISTRY }}/${{ github.repository }}:${{ env.ZONE }}-${{ env.COMPONENT }}"

#           # Make sure an image exists to promote; grab SHA
#           if [[ ! $(docker pull "${IMG_PREV}") ]]; then
#               echo -e "\n No images to promote"
#               exit 0
#           fi
#           SHA_PREV=$(docker inspect -f '{{.Id}}' "${IMG_PREV}")

#           # Use blank SHA for promoted image, unless a real one exists instead
#           SHA_ZONE=""
#           if [[ $(docker pull "${IMG_ZONE}") ]]; then
#             SHA_ZONE=$(docker inspect -f '{{.Id}}' "${IMG_ZONE}")
#           fi

#           # Output SHAs
#           echo -e "\n${IMG_PREV}: ${SHA_PREV}"
#           echo -e "${IMG_ZONE}: ${SHA_ZONE}\n"

#           # If different, then trigger updates
#           if [[ "${SHA_PREV}" != "${SHA_ZONE}" ]]; then
#             echo "::set-output name=build::true"
#             echo "Image has changed"

#             # Login to OpenShift and select project
#             oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
#             oc project ${{ secrets.OC_NAMESPACE }}

#             oc delete is/${{ env.NAME }}-${{ env.ZONE}}-${{ env.COMPONENT }} || true
#             exit 0
#           fi
#           echo "Image promotion not required"

#       - name: Promote Backend Image
#         if: steps.check.outputs.build == 'true'
#         uses: shrink/actions-docker-registry-tag@v2
#         with:
#           registry: ${{ env.REGISTRY }}
#           repository: ${{ github.repository }}
#           target: ${{ env.PREV }}-${{ env.COMPONENT }}
#           tags: |
#             ${{ env.ZONE }}-${{ env.COMPONENT }}

#   # If merged, then handle any image promotion
#   image-frontend:
#     name: Frontend Image Promotion
#     outputs:
#       build: ${{ steps.check.outputs.build }}
#     env:
#       COMPONENT: frontend
#       PREV: ${{ github.event.number }}
#       ZONE: test
#     environment:
#       name: test
#     runs-on: ubuntu-22.04
#     if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
#     steps:
#       - name: Check for image changes
#         id: check
#         run: |
#           # Vars
#           IMG_PREV="${{ env.REGISTRY }}/${{ github.repository }}:${{ env.PREV }}-${{ env.COMPONENT }}"
#           IMG_ZONE="${{ env.REGISTRY }}/${{ github.repository }}:${{ env.ZONE }}-${{ env.COMPONENT }}"

#           # Make sure an image exists to promote; grab SHA
#           if [[ ! $(docker pull "${IMG_PREV}") ]]; then
#               echo -e "\n No images to promote"
#               exit 0
#           fi
#           SHA_PREV=$(docker inspect -f '{{.Id}}' "${IMG_PREV}")

#           # Use blank SHA for promoted image, unless a real one exists instead
#           SHA_ZONE=""
#           if [[ $(docker pull "${IMG_ZONE}") ]]; then
#             SHA_ZONE=$(docker inspect -f '{{.Id}}' "${IMG_ZONE}")
#           fi

#           # Output SHAs
#           echo -e "\n${IMG_PREV}: ${SHA_PREV}"
#           echo -e "${IMG_ZONE}: ${SHA_ZONE}\n"

#           # If different, then trigger updates
#           if [[ "${SHA_PREV}" != "${SHA_ZONE}" ]]; then
#             echo "::set-output name=build::true"
#             echo "Image has changed"

#             # Login to OpenShift and select project
#             oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
#             oc project ${{ secrets.OC_NAMESPACE }}

#             oc delete is/${{ env.NAME }}-${{ env.ZONE}}-${{ env.COMPONENT }} || true
#             exit 0
#           fi
#           echo "Image promotion not required"

#       - name: Promote Backend Image
#         if: steps.check.outputs.build == 'true'
#         uses: shrink/actions-docker-registry-tag@v2
#         with:
#           registry: ${{ env.REGISTRY }}
#           repository: ${{ github.repository }}
#           target: ${{ env.PREV }}-${{ env.COMPONENT }}
#           tags: |
#             ${{ env.ZONE }}-${{ env.COMPONENT }}

#   # Notify when PR merged and branch = main
#   merge-notification:
#     name: Merge Notification
#     runs-on: ubuntu-22.04
#     if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
#     steps:
#       - name: Pre-merge update
#         uses: mshick/add-pr-comment@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           allow-repeats: false
#           message: |
#             Your Pull Request code is being promoted!  Please follow the link below.

#             [Main Merge Workflow](https://github.com/${{ github.repository }}/actions/workflows/merge-main.yml)
# sonarcloud:
#     name: Static Analysis
#     needs:
#       - tests
#     runs-on: ubuntu-22.04
#     steps:
#       # Disable shallow clone for SonarCloud analysis
#       - uses: actions/checkout@v3
#         with:
#           fetch-depth: 0

#       - name: Get backend coverage from cache
#         uses: actions/cache@v3
#         with:
#           path: backend/coverage
#           key: coverage-backend-${{ github.run_number }}
#           restore-keys: |
#             coverage-backend-

#       - name: Get frontend coverage from cache
#         uses: actions/cache@v3
#         with:
#           path: frontend/coverage
#           key: coverage-frontend-${{ github.run_number }}
#           restore-keys: |
#             coverage-frontend-

#       - name: SonarCloud Scan
#         uses: SonarSource/sonarcloud-github-action@master
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         with:
#           args: >
#             -Dsonar.exclusions=**/test/**,.github/**/*,*.md
#             -Dsonar.organization=bcgov-sonarcloud
#             -Dsonar.javascript.lcov.reportPaths=backend/coverage/lcov.info,frontend/coverage/lcov.info
#             -Dsonar.cobertura.reportPaths=backend/coverage/cobertura-coverage.xml,frontend/coverage/cobertura-coverage.xml
#             -Dsonar.project.monorepo.enabled=true
#             -Dsonar.projectKey=${{ github.event.repository.name }}
#             -Dsonar.sources=backend,frontend
#             -Dsonar.tests=backend/test,frontend/test