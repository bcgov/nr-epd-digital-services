name: Build Image

on:
  workflow_call:
    inputs:
      component:
        type: string
        required: true
        description: Component, e.g. backend, frontend
      img_build:
        type: string
        required: true
        description: Default zone, usually pr#
      img_fallback:
        type: string
        required: true
        description: Where to pull default images from, e.g. prod, test
      force_build:
        type: string
        required: false
        default: "true"
      repository:
        type: string
        required: false
        default: ${{ github.repository }}
        description: Optional, specify a repo to clone and build from
      triggers:
        type: string
        required: false
        default: "('.')"
        description: Optional, specify paths to conditionally trigger a build, e.g. ('./backend/', './frontend/)
    secrets:
      gh_token:
        required: true
        description: Default github token (secrets.GITHUB_TOKEN)
    outputs:
      build:
        description: True = build has changed
        value: ${{ jobs.build.outputs.build }}

env:
  default_branch: ${{ github.event.repository.default_branch }}

jobs:
  build:
    name: ${{ inputs.component }}
    runs-on: ubuntu-22.04
    outputs:
      build: ${{ steps.check.outputs.build }}
    steps:
      - uses: actions/checkout@v3
        with:
          # Check out source repo
          repository: ${{ github.repository }}

      # Check triggers to see if a build is required
      # Returns jobs.check.outputs.build as a boolean (true/false)
      - name: Check and process modified files
        id: check
        run: |
          FORCE_BUILD=${{ inputs.force_build }}
          if [[ $FORCE_BUILD == "true" ]]
          then
                  # Output build=true for next steps
                  echo "build=true" >> $GITHUB_OUTPUT
                  exit 0
          fi
          # Fetch default branch to diff against
          git fetch origin ${{ env.default_branch }}:refs/remotes/origin/main

          # Trigger build if diff matches any triggers
          TRIGGERS=${{ inputs.triggers }}
          while read -r check
          do
            for t in "${TRIGGERS[@]}"; do
              if [[ "${check}" =~ "${t}" ]]
              then
                  # Output build=true for next steps
                  echo "build=true" >> $GITHUB_OUTPUT
                  echo -e "${t}\n --> ${check}\n"
                  exit 0
              fi
            done
          done < <(git diff origin/${{ env.default_branch }} --name-only)

          # Check that fallback tag exists, otherwise build
          TOKEN=$(curl -s https://ghcr.io/token\?scope\="repository:${{ github.repository }}/${{ inputs.component }}:pull" | jq -r .token)
          URL="https://ghcr.io/v2/${{ github.repository }}/${{ inputs.component }}/manifests/${{ inputs.img_fallback }}"
          if [ $(curl -ILso /dev/null -w "%{http_code}" -H "Authorization: Bearer ${TOKEN}" "${URL}") -ne 200 ]
          then
              # Output build=true for next steps
              echo "build=true" >> $GITHUB_OUTPUT
              echo -e "\nBuilding image, since no fallback is available!"
              exit 0
          fi

          # If at this point, no build is required
          echo "build=false" >> $GITHUB_OUTPUT
          echo "Container build not required"

      # If a build is not required, reuse a previous image
      - name: Recycle/retag Previous Images
        uses: shrink/actions-docker-registry-tag@v3
        if: steps.check.outputs.build != 'true'
        with:
          registry: ghcr.io
          repository: ${{ github.repository }}/${{ inputs.component }}
          target: ${{ inputs.img_fallback }}
          tags: ${{ inputs.img_build }}

      # If a build is required, then create a new image
      - uses: actions/checkout@v3
        with:
          # Check out build repo
          repository: ${{ inputs.repository }}

      - name: Set up Docker Buildx
        if: steps.check.outputs.build == 'true'
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        if: steps.check.outputs.build == 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.gh_token }}

      - name: Build and push ${{ inputs.component }} Docker image
        if: steps.check.outputs.build == 'true'
        uses: docker/build-push-action@v3.1.1
        with:
          context: ./${{ inputs.component }}/
          push: true
          tags: ghcr.io/${{ github.repository }}/${{ inputs.component }}:${{ inputs.img_build }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
