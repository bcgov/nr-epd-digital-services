name: Continuous Deployment to TEST On push to Main

on:
  workflow_dispatch: # TODO this is there for testing purposes, once the pipelines are all done, remove this
  push:
    branches:
      - 'main'
    paths:
      - 'backend/**'
      - 'frontend/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  builds:
    name: Builds
    environment: dev
    uses: ./.github/workflows/_build.yml
    strategy:
      matrix:
        component: [ backend, frontend ]
        include:
          - component: backend
            triggers: ('backend/')
          - component: frontend
            triggers: ('frontend/')
    secrets:
      gh_token: ${{ secrets.GITHUB_TOKEN }}
    with:
      component: ${{ matrix.component }}
      img_build: "test"
      img_fallback: "dev" # Tag dev or latest image to test
      triggers: ${{ matrix.triggers }}


  deploys:
    name: Deploys
    needs:
      - builds
    # If any of the previous created a build, then deploy
    if: contains(needs.*.outputs.build, 'true')
    uses: ./.github/workflows/_deploy.yml
    strategy:
      matrix:
        component: [backend, database, frontend]
        include:
          - component: database
            overwrite: false
            template_file: .github/openshift/deploy.database.yml
            template_vars: -p DB_PVC_SIZE=400Mi
          - component: backend
            overwrite: true
            template_file: .github/openshift/deploy.backend.yml
            template_vars: -p PROMOTE=${{ github.repository }}/backend -p CONTAINER_PORT=3000 -p ENV=test -p IMAGE_TAG=test
          - component: frontend
            overwrite: true
            template_file: .github/openshift/deploy.frontend.yml
            template_vars: -p PROMOTE=${{ github.repository }}/frontend -p CONTAINER_PORT=3000 -p ENV=test -p IMAGE_TAG=test
    secrets:
      oc_namespace: ${{ secrets.OC_NAMESPACE }}
      oc_server: ${{ secrets.OC_SERVER }}
      oc_token: ${{ secrets.OC_TOKEN }}
    with:
      environment: test
      component: ${{ matrix.component }}
      overwrite: ${{ matrix.overwrite }}
      template_file: ${{ matrix.template_file }}
      template_vars: ${{ matrix.template_vars }}
