apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: ${NAME}
  annotations:
    description: "EPD Digital Services"
    tags: "EPD"
    iconClass: icon-js
labels:
  app: ${NAME}-${COMPONENT}
  app.kubernetes.io/part-of: ${NAME}-${COMPONENT}
parameters:
  - name: NAME
    description: Product name
    value: epd
  - name: COMPONENT
    description: Component name
    value: database
  - name: IMAGE_TAG
    description: Image tag to use
    value: latest
  - description: Password for the PostgreSQL connection user.
    from: "[a-zA-Z0-9]{16}"
    generate: expression
    name: POSTGRES_DB_PASSWORD
  - description: Password for the PostgreSQL Admin connection user.
    from: "[a-zA-Z0-9]{16}"
    generate: expression
    name: POSTGRES_ADMIN_PASSWORD
  - description: Volume space available for data, e.g. 512Mi, 2Gi.
    displayName: Database Volume Capacity
    name: DB_PVC_SIZE
    required: true
    value: "512Mi"
  - name: REGISTRY
    value: registry.connect.redhat.com
  - name: PROMOTE
    description: Image (namespace/name:tag) to promote/import
    value: crunchydata/crunchy-postgres-gis:ubi8-14.7-3.1-0
objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${NAME}-${COMPONENT}
      labels:
        app: ${NAME}-${COMPONENT}
    stringData:
      POSTGRES_DB_USERNAME: epdusers
      POSTGRES_DB_PASSWORD: ${POSTGRES_DB_PASSWORD}
      POSTGRES_ADMIN_USERNAME: postgres
      POSTGRES_ADMIN_PASSWORD: ${POSTGRES_ADMIN_PASSWORD}
  - kind: ConfigMap 
    apiVersion: v1 
    metadata:
      name: ${NAME}-${COMPONENT}
    data:
      # Configuration values can be set as key-value properties
      POSTGRESQL_HOST: epd-database
      POSTGRESQL_PORT: "5432"
      POSTGRES_DATABASE: epd_dev
      POSTGRES_DB_SCHEMA: epd_users
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${NAME}-${COMPONENT}
      labels:
        app: ${NAME}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: "${DB_PVC_SIZE}"
      storageClassName: netapp-file-standard
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${NAME}-${COMPONENT}
      labels:
        app: ${NAME}
    spec:
      lookupPolicy:
        local: false
      tags:
      - name: ${IMAGE_TAG}
        from:
          kind: DockerImage
          name: ${REGISTRY}/${PROMOTE}
        referencePolicy:
          type: Local
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${NAME}-${COMPONENT}
      labels:
        app: ${NAME}
    spec:
      replicas: 1
      triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
          - ${NAME}
          from:
            kind: ImageStreamTag
            name: ${NAME}-${COMPONENT}:${IMAGE_TAG}
      selector:
        deploymentconfig: ${NAME}-${COMPONENT}
      strategy:
        type: Recreate
        recreateParams:
          timeoutSeconds: 600
        activeDeadlineSeconds: 21600
      template:
        metadata:
          name: ${NAME}-${COMPONENT}
          labels:
            app: ${NAME}
            deploymentconfig: ${NAME}-${COMPONENT}
        spec:
          volumes:
            - name: ${NAME}-${COMPONENT}
              persistentVolumeClaim:
                claimName: ${NAME}-${COMPONENT}
          containers:
            - name: ${NAME}
              image: ${NAME}-${COMPONENT}:${IMAGE_TAG}
              ports:
                - containerPort: 5432
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /opt/crunchy/bin/postgres/readiness.sh
                    # - bash
                    # - '-c'
                    # - >-
                    #   psql -q -d
                    #   $POSTGRESQL_DATABASE -c 'SELECT 1'
                failureThreshold: 5
                initialDelaySeconds: 30
                periodSeconds: 15
                timeoutSeconds: 5
              livenessProbe:
                exec:
                  command:
                    - /opt/crunchy/bin/postgres/liveness.sh
                    # - bash
                    # - '-c'
                    # - >-
                    #   psql -q -d
                    #   $POSTGRESQL_DATABASE -c 'SELECT 1'
                failureThreshold: 5
                initialDelaySeconds: 30
                periodSeconds: 15
                timeoutSeconds: 5
              env:
                - name: MODE
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-${COMPONENT}
                      key: MODE
                - name: PG_DATABASE
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-${COMPONENT}
                      key: POSTGRES_DATABASE
                - name: PG_PRIMARY_PORT
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-${COMPONENT}
                      key: POSTGRESQL_PORT
                - name: PG_MODE
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-${COMPONENT}
                      key: PG_MODE
                - name: PGHOST
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-${COMPONENT}
                      key: POSTGRESQL_HOST
                - name: PG_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${COMPONENT}
                      key: POSTGRES_ADMIN_PASSWORD
                - name: PG_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${COMPONENT}
                      key: POSTGRES_ADMIN_USERNAME
                - name: PG_PRIMARY_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${COMPONENT}
                      key: POSTGRES_ADMIN_USERNAME
                - name: PG_PRIMARY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${COMPONENT}
                      key: POSTGRES_ADMIN_PASSWORD
                - name: PG_ROOT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${COMPONENT}
                      key: POSTGRES_ADMIN_PASSWORD
                - name: USERS_MICROSERVICE_ENDPOINT
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-database
                      key: USERS_MICROSERVICE_ENDPOINT
                - name: APPLICATION_MICROSERVICE_ENDPOINT
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-database
                      key: APPLICATION_MICROSERVICE_ENDPOINT
                - name: PGHOST
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${COMPONENT}
                      key: PGHOST
              volumeMounts:
                - name: ${NAME}-${COMPONENT}
                  mountPath: "/pgdata"
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: Always
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          schedulerName: default-scheduler
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}
      name: ${NAME}-${COMPONENT}
    spec:
      ports:
        - name: postgresql
          nodePort: 0
          port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        deploymentconfig: ${NAME}-${COMPONENT}
      sessionAffinity: None
      type: ClusterIP