apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: ${NAME}
  annotations:
    description: "EPD backend-gateway"
    tags: "epd-backend"
    iconClass: icon-js
labels:
  app: ${NAME}-${COMPONENT}
  app.kubernetes.io/part-of: ${NAME}-${COMPONENT}
parameters:
  - name: NAME
    description: Module name
    value: epd
  - name: COMPONENT
    description: Component name
    value: backend-gateway
  - name: IMAGE_TAG
    description: Image tag to use
    value: latest
  - name: DOMAIN
    value: apps.silver.devops.gov.bc.ca
  - name: CPU_REQUEST
    value: "125m"
  - name: MEMORY_REQUEST
    value: "150Mi"
  - name: CPU_LIMIT
    value: "275m"
  - name: MEMORY_LIMIT
    value: "450Mi"
  - name: MIN_REPLICAS
    description: The minimum amount of replicas
    value: "1"
  - name: MAX_REPLICAS
    description: The maximum amount of replicas
    value: "3"
  - name: CONTAINER_PORT
    description: The port on which the application will be accessible
    required: true
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: PROMOTE
    description: Image (namespace/name:tag) to promote/import
    value: bcgov/nr-epd-digital-services/backend/gateway
  - name: ENV
    description: The Environment on which it is deployed
    required: true
objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${NAME}-${COMPONENT}
      name: ${NAME}-${COMPONENT}
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: ${IMAGE_TAG}
          from:
            kind: DockerImage
            name: ${REGISTRY}/${PROMOTE}:${IMAGE_TAG}
          referencePolicy:
            type: Local
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${NAME}-${COMPONENT}
      name: ${NAME}-${COMPONENT}
    spec:
      replicas: 1
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}-${COMPONENT}
            from:
              kind: ImageStreamTag
              name: ${NAME}-${COMPONENT}:${IMAGE_TAG}
      selector:
        deploymentconfig: ${NAME}-${COMPONENT}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: ${NAME}-${COMPONENT}
            deploymentconfig: ${NAME}-${COMPONENT}
        spec:
          
          containers:
            - image: " "
              imagePullPolicy: Always
              name: ${NAME}-${COMPONENT}
              env:
                - name: POSTGRESQL_HOST
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-database
                      key: POSTGRESQL_HOST
                - name: POSTGRESQL_DATABASE
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-database
                      key: POSTGRES_DATABASE
                - name: USERS_MICROSERVICE
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-database
                      key: USERS_MICROSERVICE
                - name: USERS_MICROSERVICE_ENDPOINT
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-database
                      key: USERS_MICROSERVICE_ENDPOINT
                - name: APPLICATION_MICROSERVICE_ENDPOINT
                  valueFrom:
                    configMapKeyRef:
                      name: ${NAME}-database
                      key: APPLICATION_MICROSERVICE_ENDPOINT
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-database
                      key: POSTGRES_DB_PASSWORD
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-database
                      key: POSTGRES_DB_USERNAME
                # - name: USERS_MICROSERVICE
                #   value: https://${NAME}-backend-users-${ENV}.${DOMAIN}
                # - name: USERS_MICROSERVICE_ENDPOINT
                #   value: https://${NAME}-backend-users-${ENV}.${DOMAIN}/graphql
                # - name: APPLICATION_MICROSERVICE_ENDPOINT
                #   value: https://${NAME}-backend-applications-${ENV}.${DOMAIN}/graphql
              ports:
                - containerPort: ${{CONTAINER_PORT}}
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              readinessProbe:
                tcpSocket:
                  port: ${{CONTAINER_PORT}}
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 5
                failureThreshold: 3
                successThreshold: 1
              livenessProbe:
                successThreshold: 1
                failureThreshold: 3
                httpGet:
                  path: /
                  port: ${{CONTAINER_PORT}}
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 5
          # initContainers:
          #   - name: wait-for-graphql
          #   # is this image going to work?
          #     image: busybox:1.28 
          #     args:
          #     - /bin/sh
          #     - -c
          #     - >
          #       set -x;
          #       while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://epd-backend-applications/:)" != "200" ]]; do 
          #         echo '.'
          #         sleep 15;
          #       done  
          initContainers:
            - name: init-${NAME}-backend-applications
              image: registry.access.redhat.com/ubi8/ubi:latest
              command: ['sh', '-c', 'until getent hosts epd-backend-applications; do echo waiting for applications; sleep 2; done;']
            - name: init-${NAME}-backend-users
              image: registry.access.redhat.com/ubi8/ubi:latest
              command: ['sh', '-c', 'until getent hosts epd-backend-users; do echo waiting for users; sleep 2; done;']
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${COMPONENT}
      name: ${NAME}-${COMPONENT}
    spec:
      ports:
        - name: ${CONTAINER_PORT}-tcp
          protocol: TCP
          port: 80
          targetPort: ${{CONTAINER_PORT}}
      selector:
        deploymentconfig: ${NAME}-${COMPONENT}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${NAME}-${COMPONENT}
      name: ${NAME}-${COMPONENT}
    spec:
      host: ${NAME}-${COMPONENT}-${ENV}.${DOMAIN}
      port:
        targetPort: ${CONTAINER_PORT}-tcp
      to:
        kind: Service
        name: ${NAME}-${COMPONENT}
        weight: 100
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
  - apiVersion: autoscaling/v2
    kind: HorizontalPodAutoscaler
    metadata:
      name: "${NAME}-${COMPONENT}"
    spec:
      scaleTargetRef:
        apiVersion: apps.openshift.io/v1
        kind: DeploymentConfig
        name: "${NAME}-${COMPONENT}"
      minReplicas: ${{MIN_REPLICAS}}
      maxReplicas: ${{MAX_REPLICAS}}
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 100
