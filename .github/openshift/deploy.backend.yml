apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: ${NAME}
  annotations:
    description: "EPD backend"
    tags: "epd"
    iconClass: icon-js
labels:
  app: ${NAME}-${ZONE}
  app.kubernetes.io/part-of: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Module name
    value: EPD
  - name: COMPONENT
    description: Component name
    value: backend
  - name: IMAGE_TAG
    description: Image tag to use
    value: latest
  - name: DOMAIN
    value: apps.silver.devops.gov.bc.ca
  - name: CPU_REQUEST
    value: 25m
  - name: MEMORY_REQUEST
    value: 50Mi
  - name: CPU_LIMIT
    value: 75m
  - name: MEMORY_LIMIT
    value: 150Mi
  - name: MIN_REPLICAS
    description: The minimum amount of replicas
    required: true
  - name: MAX_REPLICAS
    description: The maximum amount of replicas
    required: true
  - name: CONTAINER_PORT
    description: The port on which the application will be accessible
    required: true
objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${NAME}-${COMPONENT}
      name: ${NAME}-${COMPONENT}
    spec:
      replicas: 1
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}-${COMPONENT}
            from:
              kind: ImageStreamTag
              name: ${NAME}-${COMPONENT}:${IMAGE_TAG}
      selector:
        deploymentconfig: ${NAME}-${COMPONENT}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: ${NAME}-${COMPONENT}
            deploymentconfig: ${NAME}-${COMPONENT}
        spec:
          containers:
            - image: image-registry.openshift-image-registry.svc:5000/${NAMESPACE}/${NAME}-${COMPONENT}:${IMAGE_TAG}
              imagePullPolicy: Always
              volumeMounts:
                - name: tls-certs
                  mountPath: "/etc/tls-certs"
                  readOnly: true
              name: ${NAME}-${COMPONENT}
              env:
                - name: POSTGRESQL_HOST
                  value: ${NAME}-${ZONE}-database
                - name: POSTGRESQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-database
                      key: database-name
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-database
                      key: database-password
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-database
                      key: database-user
              ports:
                - containerPort: ${CONTAINER_PORT}
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              readinessProbe:
                tcpSocket:
                  port: ${CONTAINER_PORT}
                initialDelaySeconds: 10
                periodSeconds: 10
                timeoutSeconds: 5
                failureThreshold: 30
                successThreshold: 1
              livenessProbe:
                successThreshold: 1
                failureThreshold: 3
                httpGet:
                  path: /
                  port: ${CONTAINER_PORT}
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 30
                timeoutSeconds: 5
        volumes:
          - name: tls-certs
            secret:
              secretName: "${NAME}-${COMPONENT}-cert"
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${COMPONENT}
      name: ${NAME}-${COMPONENT}
    spec:
      ports:
        - name: ${CONTAINER_PORT}-tcp
          protocol: TCP
          port: 80
          targetPort: ${CONTAINER_PORT}
      selector:
        deploymentconfig: ${NAME}-${COMPONENT}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${NAME}-${COMPONENT}
      name: ${NAME}-${COMPONENT}
    spec:
      host: ${NAME}-${COMPONENT}.${DOMAIN}
      port:
        targetPort: ${CONTAINER_PORT}-tcp
      to:
        kind: Service
        name: ${NAME}-${COMPONENT}
        weight: 100
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
  - apiVersion: autoscaling/v2beta1
    kind: HorizontalPodAutoscaler
    metadata:
      name: "${NAME}-${COMPONENT}"
    spec:
      scaleTargetRef:
        apiVersion: apps.openshift.io/v1
        kind: DeploymentConfig
        name: "${NAME}-${COMPONENT}"
        subresource: scale
      minReplicas: ${MIN_REPLICAS}
      maxReplicas: ${MAX_REPLICAS}
      metrics:
        - type: Resource
          resource:
            name: cpu
            targetAverageUtilization: 100
