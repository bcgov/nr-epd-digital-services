apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Chart.Name }}
  name: {{ .Chart.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
    spec:
      containers:
      - env:
        - name: NODE_CONFIG
          valueFrom:
            configMapKeyRef:
              key: NODE_CONFIG
              name: "{{ .Values.formsflow.configmap }}"
        - name: ROOT_EMAIL
          valueFrom:
            secretKeyRef:
              key: FORMIO_ROOT_EMAIL
              name: "{{ .Values.formsflow.secret }}"
        - name: ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: FORMIO_ROOT_PASSWORD
              name: "{{ .Values.formsflow.secret }}"
        - name: FORMIO_JWT_SECRET
          valueFrom:
            secretKeyRef:
              key: FORMIO_JWT_SECRET
              name: "{{ .Values.formsflow.secret }}"
        - name: FORMIO_DOMAIN
          valueFrom:
            configMapKeyRef:
              key: FORMIO_DOMAIN
              name: "{{ .Values.formsflow.configmap }}"
        - name: MULTI_TENANCY_ENABLED
          valueFrom:
            configMapKeyRef:
              key: MULTI_TENANCY_ENABLED
              name: "{{ .Values.formsflow.configmap }}"
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 10
          initialDelaySeconds: 120
          periodSeconds: 60
          successThreshold: 1
          tcpSocket:
            port: 3001
          timeoutSeconds: 1
        name: {{ .Chart.Name }}
        ports:
        - containerPort: {{ int .Values.ingress.port }}
        readinessProbe:
          failureThreshold: 10
          initialDelaySeconds: 120
          periodSeconds: 60
          successThreshold: 1
          tcpSocket:
            port: 3001
          timeoutSeconds: 1
        resources:
          limits:
            cpu: "{{ .Values.resources.limits.cpu }}"
            memory: "{{ .Values.resources.limits.memory }}"
          requests:
            cpu: "{{ .Values.resources.requests.cpu }}"
            memory: "{{ .Values.resources.requests.memory }}"
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        tty: true
      imagePullSecrets:
      - name: "{{ .Values.formsflow.auth }}"
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
